//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `Fingerprint`.
    static let fingerprint = Rswift.ImageResource(bundle: R.hostingBundle, name: "Fingerprint")
    
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back")
    
    static let icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon")
    
    static let chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "Chat")
    
    static let videocallCamera = Rswift.ImageResource(bundle: R.hostingBundle, name: "VideoCallCamera")
    
    static let medicalHistory = Rswift.ImageResource(bundle: R.hostingBundle, name: "MedicalHistory")
    
    static let videoCallDoctorNotAssigned = Rswift.ImageResource(bundle: R.hostingBundle, name: "videoCallDoctorNotAssigned")
    
    static let allergiesIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AllergiesIcon")
    /// Image `AllergyRateOff`.
    static let allergyRateOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "AllergyRateOff")
    /// Image `AllergyRateOn`.
    static let allergyRateOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "AllergyRateOn")
    /// Image `Appointment`.
    static let appointment = Rswift.ImageResource(bundle: R.hostingBundle, name: "Appointment")
    /// Image `Arrow`.
    static let arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Arrow")
    /// Image `Camera`.
    static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "Camera")
    /// Image `CellArrow`.
    static let cellArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellArrow")
    /// Image `CellFollowers`.
    static let cellFollowers = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellFollowers")
    /// Image `CellMembers`.
    static let cellMembers = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellMembers")
    /// Image `CellMessages`.
    static let cellMessages = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellMessages")
    /// Image `CheckAll`.
    static let checkAll = Rswift.ImageResource(bundle: R.hostingBundle, name: "CheckAll")
    /// Image `Check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "Check")
    /// Image `Clock`.
    static let clock = Rswift.ImageResource(bundle: R.hostingBundle, name: "Clock")
    /// Image `Close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "Close")
    /// Image `CompleteSeparator`.
    static let completeSeparator = Rswift.ImageResource(bundle: R.hostingBundle, name: "CompleteSeparator")
    /// Image `Delete`.
    static let delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "Delete")
    /// Image `DerivationsIcon`.
    static let derivationsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "DerivationsIcon")
    /// Image `DiseasesIcon`.
    static let diseasesIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "DiseasesIcon")
    /// Image `DoctorIcon`.
    static let doctorIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "DoctorIcon")
    
    /// Image `MedicationsIcon`.
    static let medicationsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "MedicationsIcon")
    
    /// Image `MyDocumentsIcon`.
    static let myDocumentsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyDocumentsIcon")
    
    /// Image `RecipeIcon`.
    static let recipeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "RecipeIcon")
    
    /// `UIImage(named: "Fingerprint", bundle: ..., traitCollection: ...)`
    static func fingerprint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fingerprint, compatibleWith: traitCollection)
    }
    
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    
    static func icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon, compatibleWith: traitCollection)
    }
    
    static func videoCallDoctorNotAssigned(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.videoCallDoctorNotAssigned, compatibleWith: traitCollection)
    }
    
    static func chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.chat, compatibleWith: traitCollection)
    }
    
    static func videocallCamera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.videocallCamera, compatibleWith: traitCollection)
    }
    
    static func medicalHistory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.medicalHistory, compatibleWith: traitCollection)
    }
    
    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "RecipeIcon", bundle: ..., traitCollection: ...)`
        static func recipeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.recipeIcon, compatibleWith: traitCollection)
        }
    #endif
    
    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "MyDocumentsIcon", bundle: ..., traitCollection: ...)`
        static func myDocumentsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.myDocumentsIcon, compatibleWith: traitCollection)
        }
    #endif
    
    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "MedicationsIcon", bundle: ..., traitCollection: ...)`
        static func medicationsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.medicationsIcon, compatibleWith: traitCollection)
        }
    #endif
    
    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "AllergiesIcon", bundle: ..., traitCollection: ...)`
        static func allergiesIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.allergiesIcon, compatibleWith: traitCollection)
        }
    #endif

    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "AllergyRateOff", bundle: ..., traitCollection: ...)`
        static func allergyRateOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.allergyRateOff, compatibleWith: traitCollection)
        }
    #endif

    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "AllergyRateOn", bundle: ..., traitCollection: ...)`
        static func allergyRateOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.allergyRateOn, compatibleWith: traitCollection)
        }
    #endif

    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "Appointment", bundle: ..., traitCollection: ...)`
        static func appointment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.appointment, compatibleWith: traitCollection)
        }
    #endif

    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "Arrow", bundle: ..., traitCollection: ...)`
        static func arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.arrow, compatibleWith: traitCollection)
        }
    #endif

    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "Camera", bundle: ..., traitCollection: ...)`
        static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.camera, compatibleWith: traitCollection)
        }
    #endif

    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "CellArrow", bundle: ..., traitCollection: ...)`
        static func cellArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cellArrow, compatibleWith: traitCollection)
        }
    #endif

    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "CellFollowers", bundle: ..., traitCollection: ...)`
        static func cellFollowers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cellFollowers, compatibleWith: traitCollection)
        }
    #endif

    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "CellMembers", bundle: ..., traitCollection: ...)`
        static func cellMembers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cellMembers, compatibleWith: traitCollection)
        }
    #endif

    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "CellMessages", bundle: ..., traitCollection: ...)`
        static func cellMessages(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cellMessages, compatibleWith: traitCollection)
        }
    #endif

    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "Check", bundle: ..., traitCollection: ...)`
        static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
        }
    #endif

    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "CheckAll", bundle: ..., traitCollection: ...)`
        static func checkAll(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.checkAll, compatibleWith: traitCollection)
        }
    #endif

    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "Clock", bundle: ..., traitCollection: ...)`
        static func clock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.clock, compatibleWith: traitCollection)
        }
    #endif

    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "Close", bundle: ..., traitCollection: ...)`
        static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
        }
    #endif

    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "CompleteSeparator", bundle: ..., traitCollection: ...)`
        static func completeSeparator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.completeSeparator, compatibleWith: traitCollection)
        }
    #endif

    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "Delete", bundle: ..., traitCollection: ...)`
        static func delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.delete, compatibleWith: traitCollection)
        }
    #endif

    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "DerivationsIcon", bundle: ..., traitCollection: ...)`
        static func derivationsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.derivationsIcon, compatibleWith: traitCollection)
        }
    #endif

    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "DiseasesIcon", bundle: ..., traitCollection: ...)`
        static func diseasesIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.diseasesIcon, compatibleWith: traitCollection)
        }
    #endif

    #if os(iOS) || os(tvOS)
        /// `UIImage(named: "DoctorIcon", bundle: ..., traitCollection: ...)`
        static func doctorIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.doctorIcon, compatibleWith: traitCollection)
        }
    #endif

    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 2 localization keys.
    struct localizable {
      /// en translation: Open chat
      /// 
      /// Locales: en, es
      static let mainButtonText = Rswift.StringResource(key: "main.button.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Welcome to MediQuo demo. Tap on the button to continue
      /// 
      /// Locales: en, es
      static let mainWelcomeText = Rswift.StringResource(key: "main.welcome.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      
      /// en translation: Open chat
      /// 
      /// Locales: en, es
      static func mainButtonText(_: Void = ()) -> String {
        return NSLocalizedString("main.button.text", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Welcome to MediQuo demo. Tap on the button to continue
      /// 
      /// Locales: en, es
      static func mainWelcomeText(_: Void = ()) -> String {
        return NSLocalizedString("main.welcome.text", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 0 localization keys.
    struct main {
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
